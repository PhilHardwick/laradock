{
    "swagger": "2.0",
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "info": {
        "version": "1.0.0",
        "title": "Documentally on AWS",
        "description": "**This example has a working backend hosted in AWS**\n\nYou can try all HTTP operation described in this Swagger spec.\n\nTo authenticate, register a new user and put the token you recieve in the Bearer/API key with the word 'bearer' before your token.\n"
    },
    "host": "documentally-dev.us-west-2.elasticbeanstalk.com",
    "basePath": "/",
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json",
        "multipart/form-data"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/auth/register": {
            "post": {
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "The user to register",
                        "schema": {
                            "$ref": "#/definitions/User"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Will send `Authenticated`"
                    },
                    "400": {
                        "description": "Bad request, invalid data or missing data"
                    }
                }
            }
        },
        "/auth/token": {
            "post": {
                "parameters": [
                    {
                        "name": "user creds",
                        "in": "body",
                        "description": "the username and password of the user to login",
                        "schema": {
                            "$ref": "#/definitions/UserCreds"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Will send `Authenticated`"
                    },
                    "400": {
                        "description": "Bad request, invalid data or missing data"
                    }
                }
            }
        },
        "/auth/token/renew": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Will send `Authenticated`"
                    },
                    "400": {
                        "description": "Bad request, invalid data or missing data"
                    }
                }
            }
        },
        "/spaces": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List all spaces for the logged in user",
                        "schema": {
                            "title": "Spaces",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Space"
                            }
                        }
                    }
                }
            },
            "post": {
                "parameters": [
                    {
                        "name": "space",
                        "in": "body",
                        "description": "Definition of new space to create",
                        "schema": {
                            "$ref": "#/definitions/Space"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create a new space"
                    }
                }
            }
        },
        "/spaces/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the space",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get the space of id"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the space",
                        "required": true
                    },
                    {
                        "name": "space",
                        "in": "body",
                        "description": "The full data of space to update the space with",
                        "schema": {
                            "$ref": "#/definitions/Space"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updates the space"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the space",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deletes the space"
                    }
                }
            }
        },
        "/spaces/{id}/children": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the space",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get the children of the space"
                    }
                }
            }
        },
        "/files": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a list of all the files you own"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "fileMetadata",
                        "in": "body",
                        "description": "The data to create the file/folder with, you create a folder in the same way you create a file but don't upload a file to associate with it",
                        "schema": {
                            "$ref": "#/definitions/FileCreation"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns the newly created file/folder"
                    }
                }
            }
        },
        "/files/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the file",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get the file metadata",
                        "schema": {
                            "$ref": "#/definitions/File"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the file",
                        "required": true
                    },
                    {
                        "name": "fileMetadata",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/File"
                        },
                        "description": "The data of the file that needs to be updated"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The new file metadata",
                        "schema": {
                            "$ref": "#/definitions/File"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the file",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the file",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful, no content"
                    }
                }
            }
        },
        "/files/{id}/upload": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "summary": "POST simple parameter",
                "description": "Test",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the file",
                        "required": true
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "type": "file",
                        "required": true,
                        "description": "the file to upload"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the file's metadata"
                    }
                }
            }
        },
        "/files/{id}/download": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the file",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get the file data, downloaded to the browser"
                    }
                }
            }
        },
        "/files/{id}/view": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the file",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get the file data, viewed to the browser"
                    }
                }
            }
        },
        "/files/{id}/children": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the file",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get the folder\\'s children"
                    }
                }
            }
        },
        "/files/{id}/parents": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the file",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get the folder's or file's parents"
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the file to move",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "parentIDs",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ListStrings"
                        },
                        "description": "The IDs of the new parents",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Move the file or folder from one parent to another"
                    }
                }
            }
        },
        "/deleted/files": {
            "get": {
                "description": "Get all deleted files for the current user",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of deleted files"
                    }
                }
            }
        },
        "/files/{id}/versions": {
            "get": {
                "description": "Get previous versions of file",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "description": "ID of the file",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of files which are previous versions of this file"
                    }
                }
            }
        }
    },
    "definitions": {
        "Space": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "should_version": {
                    "type": "boolean"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "UserCreds": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "File": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "FileCreation": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "space": {
                    "type": "string"
                },
                "folder": {
                    "type": "string"
                }
            }
        },
        "ListStrings": {
            "type": "array",
            "items": {
                "type": "string"
            }
        }
    }
}